name: Check studio package version and create PR from commit hash

on:
  workflow_dispatch:

jobs:
  filter-commits:
    runs-on: ubuntu-latest
    permissions:
      contents: write 
      pull-requests: write
      actions: write

    steps:

      - name: Checkout another repository
        uses: actions/checkout@v2
        with:
          repository: actionstestorg/test2
          token: ${{ secrets.TOKEN_3 }}

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          path: drawing-production
          ref: main

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Get all commits with change files or commit message to upgrade from drawing-production repo
        id: get_commits
        run: |
            cd drawing-production
            git fetch --unshallow
            commits_change=$(git log --pretty=format:"%H" -- change/)
            commits_message=$(git log --pretty=format:"%H" --grep="studio.*[0-9]\+\.[0-9]\+\.[0-9]\+")
            echo "The commit are"
            echo $commits_change
            echo $commits_message
            echo "$commits_change" | tr ' ' '\n' > commits_change.txt
            echo "commits_change_file=commits_change.txt" >> $GITHUB_ENV
            echo "$commits_message" | tr ' ' '\n' > commits_message.txt
            echo "commit message file"
            cat commits_message.txt
            echo "commits_message_file=commits_message.txt" >> $GITHUB_ENV

      - name: check commit messages for version upgrade
        id: check_messages
        run: |
              current_version=$(jq -r .version package.json)
              cd drawing-production
              echo "Reading commits from file:"
              cat $commits_message_file
              while IFS= read -r commit; do
                echo "Processing commit: $commit"
                git checkout $commit
                version=$(git log -1 --pretty=format:"%s" $commit | grep -oP "\d+\.\d+\.\d+")
                echo "The version of the commit message is $version $current_version"
                if [ "$(printf '%s\n' "$version" "$current_version" | sort -V | head -n1)" != "$current_version" ]; then
                  echo "The version of drawing-production repo $version is greater than current studio main version $current_version."
                elif [ "$(printf '%s\n' "$version" "$current_version" | sort -V | head -n1)" != "$version" ]; then
                  echo "The version of drawing-production repo $version is less than current studio main version $current_version. Exiting with issue."
                  break
                else
                  echo "The version of the commit message $version matches the current studio main version $current_version. $commit"
                  change_files=$(git show --name-only $commit | grep "change/")
                  if [ -z "$change_files" ]; then
                    echo "No change files found in commit: $commit"
                    break
                  fi
                  echo "The change files are:"
                  echo "$change_files"
                  for file in $change_files; do
                    isVersionUpgrade=$(jq -r .isStudioVersionUpgrade "$file")
                    if [ "$isVersionUpgrade" != "yes" ]; then
                      echo "The file $file is not a version upgrade. Skipping."
                      break
                    else
                      change_file_version=$(jq -r .targetStudioVersion "$file")
                      if [ "$change_file_version" != "$version" ]; then
                        echo "The version of the commit message $version does not match the version of the change file $change_file_version. Skipping the commit."
                        break
                      fi
                        echo "Creating PR for commit $commit with version $version."
                        commit_message=$(git log -1 --pretty=format:"%s" $commit | tr ' ' '_')
                        sanitized_commit_message=$(echo $commit_message | sed 's/(#\d+)//g' | tr ' ' '_')
                        echo $sanitized_commit_message
                        echo "commit_message=$sanitized_commit_message" >> $GITHUB_ENV
                        echo "commit_id=$(git log -1 --pretty=format:"%H" $commit)" >> $GITHUB_ENV
                        echo "outcome=success" >> $GITHUB_ENV
                        break
                    fi
                  done
                fi
              done < $commits_message_file
          
      - name: Check change files for target version similar to studio main version
        id: check_versions
        if: env.outcome != 'success'
        run: |
            current_version=$(jq -r .version packages/framework/package.json)
            cd drawing-production
            echo "Reading commits from file:"
            cat $commits_change_file
            while IFS= read -r commit; do
              echo "Processing commit: $commit"
              git checkout $commit
              change_files=$(git show --name-only $commit | grep "change/")
              echo "$change_files"
              for file in $change_files; do
                echo "Processing file: $file"
                isVersionUpgrade=$(jq -r .isVersionUpgrade "$file")
                if [ "$isVersionUpgrade" != "true" ]; then
                  echo "The file $file is not a version upgrade. Skipping."
                  continue
                fi
                version=$(jq -r .targetStudioVersion "$file")
                if [ "$version" ]; then
                  if [ "$(printf '%s\n' "$version" "$current_version" | sort -V | head -n1)" != "$current_version" ]; then
                    echo "The version of drawing-production repo $version is greater than current studio main version $current_version."
                  elif [ "$(printf '%s\n' "$version" "$current_version" | sort -V | head -n1)" != "$version" ]; then
                    echo "The version of drawing-production repo $version is less than current studio main version $current_version. Exiting with issue."
                    exit 1
                  else
                    echo "Creating PR for commit $commit with version $version."
                    echo "commit_message=$(git log -1 --pretty=format:"%s" $commit | tr ' ' '_')" >> $GITHUB_ENV
                    echo "commit_id=$(git log -1 --pretty=format:"%H" $commit)" >> $GITHUB_ENV
                    echo "outcome=success" >> $GITHUB_ENV
                    break
                  fi
                fi
              done
              if [ "$status" = "success" ]; then
                break
              fi
            done < $commits_change_file

      - name: Checkout to commit having the target studio version in drawing production repo
        if: env.outcome == 'success'
        uses: actions/checkout@v2
        with:
            ref: ${{ env.commit_id }}
            token: ${{ secrets.TOKEN_3 }}
      
      - name: Create new branch from the commit and push it to the drawing production repo
        run: |
          echo $commit_id
          git fetch --unshallow
          
          if [ -z "$commit_id" ]; then
            branch_name=$commit_message
          else
            branch_name=$commit_message
          fi
          
          git checkout -b $branch_name  
          git push -u -f origin $branch_name

      - name: Create pull request in drawing-production from dev branch to main branch
        id: create_pr
        uses: repo-sync/pull-request@v2
        with:
            source_branch: ${{ env.commit_message }}
            destination_branch: main
            pr_label: "merge-dev-to-main"
            github_token: ${{ secrets.TOKEN_3 }}
            pr_title: "PR for merging dev to main: ${{ env.commit_message }}"
            pr_body: "This is an auto generated PR for merging dev to main branch\n The commit message is ${{ env.commit_message }}\nThe commit id is ${{ env.commit_id }}"