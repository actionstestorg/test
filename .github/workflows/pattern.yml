name: Check studio package version and create PR from commit hash

on:
  workflow_dispatch:

jobs:
  filter-commits:
    runs-on: windows-latest
    permissions:
      contents: write 
      pull-requests: write
      actions: write

    steps:

      - name: Checkout another repository
        uses: actions/checkout@v2
        with:
          repository: actionstestorg/test2
          token: ${{ secrets.TOKEN_3 }}

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          path: drawing-production
          ref: main

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Get all commits with change files or commit message to upgrade from drawing-production repo
        id: get_commits
        run: |
            cd drawing-production
            git fetch --unshallow
            $commits_change = git log --pretty=format:"%H" -- change/
            $commits_message = git log --pretty=format:"%H" --grep="studio.*[0-9]\+\.[0-9]\+\.[0-9]\+"
            echo "The commit are"
            echo $commits_change
            echo $commits_message
            echo "$commits_change" -split ' ' | Out-File commits_change.txt
            echo "::set-output name=commits_change_file::commits_change.txt"
            echo "$commits_message" -split ' ' | Out-File commits_message.txt
            echo "commit message file"
            Get-Content commits_message.txt
            echo "::set-output name=commits_message_file::commits_message.txt"

      - name: check commit messages for version upgrade
        id: check_messages
        run: |
              $current_version = (Get-Content package.json | ConvertFrom-Json).version
              cd drawing-production
              echo "Reading commits from file:"
              Get-Content ${{ steps.get_commits.outputs.commits_message_file }}
              foreach ($commit in Get-Content ${{ steps.get_commits.outputs.commits_message_file }}) {
                echo "Processing commit: $commit"
                git checkout $commit
                $version = (git log -1 --pretty=format:"%s" $commit) -match "(\d+\.\d+\.\d+)" | Out-Null; $matches[0]
                echo "The version of the commit message is $version $current_version"
                if ($version -gt $current_version) {
                  echo "The version of drawing-production repo $version is greater than current studio main version $current_version."
                } elseif ($version -lt $current_version) {
                  echo "The version of drawing-production repo $version is less than current studio main version $current_version. Exiting with issue."
                  break
                } else {
                  echo "The version of the commit message $version matches the current studio main version $current_version. $commit"
                  $change_files = git show --name-only $commit | Select-String "change/"
                  if (-not $change_files) {
                    echo "No change files found in commit: $commit"
                    break
                  }
                  echo "The change files are:"
                  echo $change_files
                  foreach ($file in $change_files) {
                    $isVersionUpgrade = (Get-Content $file | ConvertFrom-Json).isStudioVersionUpgrade
                    if ($isVersionUpgrade -ne "yes") {
                      echo "The file $file is not a version upgrade. Skipping."
                      break
                    } else {
                      $change_file_version = (Get-Content $file | ConvertFrom-Json).targetStudioVersion
                      if ($change_file_version -ne $version) {
                        echo "The version of the commit message $version does not match the version of the change file $change_file_version. Skipping the commit."
                        break
                      }
                        echo "Creating PR for commit $commit with version $version."
                        $commit_message = (git log -1 --pretty=format:"%s" $commit) -replace ' ', '_'
                        $sanitized_commit_message = $commit_message -replace '\(#\d+\)', '' -replace ' ', '_'
                        echo $sanitized_commit_message
                        echo "::set-output name=commit_message::$sanitized_commit_message"
                        echo "::set-output name=commit_id::$(git log -1 --pretty=format:"%H" $commit)"
                        echo "::set-output name=outcome::success"
                        break
                    }
                  }
                }
              }
          
      - name: Check change files for target version similar to studio main version
        id: check_versions
        if: steps.check_messages.outputs.outcome != 'success'
        run: |
            $current_version = (Get-Content packages/framework/package.json | ConvertFrom-Json).version
            cd drawing-production
            echo "Reading commits from file:"
            Get-Content ${{ steps.get_commits.outputs.commits_change_file }}
            foreach ($commit in Get-Content ${{ steps.get_commits.outputs.commits_change_file }}) {
              echo "Processing commit: $commit"
              git checkout $commit
              $change_files = git show --name-only $commit | Select-String "change/"
              echo $change_files
              foreach ($file in $change_files) {
                echo "Processing file: $file"
                $isVersionUpgrade = (Get-Content $file | ConvertFrom-Json).isVersionUpgrade
                if ($isVersionUpgrade -ne "true") {
                  echo "The file $file is not a version upgrade. Skipping."
                  continue
                }
                $version = (Get-Content $file | ConvertFrom-Json).targetStudioVersion
                if ($version) {
                  if ($version -gt $current_version) {
                    echo "The version of drawing-production repo $version is greater than current studio main version $current_version."
                  } elseif ($version -lt $current_version) {
                    echo "The version of drawing-production repo $version is less than current studio main version $current_version. Exiting with issue."
                    exit 1
                  } else {
                    echo "Creating PR for commit $commit with version $version."
                    echo "::set-output name=commit_message::$(git log -1 --pretty=format:"%s" $commit -replace ' ', '_')"
                    echo "::set-output name=commit_id::$(git log -1 --pretty=format:"%H" $commit)"
                    echo "::set-output name=outcome::success"
                    break
                  }
                }
              }
              if ($status -eq "success") {
                break
              }
            }

      - name: Checkout to commit having the target studio version in drawing production repo
        if: steps.check_messages.outputs.outcome == 'success' || steps.check_versions.outputs.outcome != 'success'
        uses: actions/checkout@v2
        with:
            ref: ${{ steps.check_versions.outputs.commit_id }}
            token: ${{ secrets.TOKEN_3 }}
      
      - name: Create new branch from the commit and push it to the drawing production repo
        run: |
          echo $commit_id
          git fetch --unshallow
          
          if (-not ${{ steps.check_messages.outputs.commit_id }}) {
            $branch_name = ${{ steps.check_versions.outputs.commit_message }}
          } else {
            $branch_name = ${{ steps.check_messages.outputs.commit_message }}
          }
          
          git checkout -b $branch_name  
          git push -u -f origin $branch_name

      - name: Create pull request in drawing-production from dev branch to main branch
        id: create_pr
        uses: repo-sync/pull-request@v2
        with:
            source_branch: ${{steps.check_versions.outputs.commit_message}}
            destination_branch: main
            pr_label: "merge-dev-to-main"
            github_token: ${{ secrets.TOKEN_3 }}
            pr_title: "PR for merging dev to main: ${{steps.check_versions.outputs.commit_message}}"
            pr_body: "This is an auto generated PR for merging dev to main branch\n The commit message is ${{steps.check_versions.outputs.commit_message}}\nThe commit id is ${{steps.check_versions.outputs.commit_id}} "