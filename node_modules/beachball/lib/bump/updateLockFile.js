"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateLockFile = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const workspace_tools_1 = require("workspace-tools");
const packageManager_1 = require("../packageManager/packageManager");
/**
 * Detects lockfile for npm, pnpm, or yarn and runs the appropriate command to update it
 */
async function updateLockFile(cwd) {
    const root = (0, workspace_tools_1.findProjectRoot)(cwd);
    if (!root) {
        return;
    }
    let updateFile;
    let updateCommand;
    if (fs_extra_1.default.existsSync(path_1.default.join(root, 'package-lock.json'))) {
        updateFile = 'package-lock.json';
        updateCommand = ['npm', 'install', '--package-lock-only', '--ignore-scripts'];
    }
    else if (fs_extra_1.default.existsSync(path_1.default.join(root, 'pnpm-lock.yaml'))) {
        updateFile = 'pnpm-lock.yaml';
        updateCommand = ['pnpm', 'install', '--lockfile-only', '--ignore-scripts'];
    }
    else if (fs_extra_1.default.existsSync(path_1.default.join(root, 'yarn.lock'))) {
        const version = await (0, packageManager_1.packageManager)('yarn', ['--version'], { cwd: root });
        if (version.success) {
            // For yarn v1, local versions aren't recorded in the lock file, so we don't need an update.
            // yarn v2+ records these versions and may require an update.
            if (!version.stdout.startsWith('1.')) {
                updateFile = 'yarn.lock';
                updateCommand = ['yarn', 'install', '--mode', 'update-lockfile'];
            }
        }
        else {
            console.warn('Failed to get yarn version. Continuing...');
        }
    }
    if (updateFile && updateCommand) {
        console.log(`Updating ${updateFile} after bumping packages`);
        const res = await (0, packageManager_1.packageManager)(updateCommand[0], updateCommand.slice(1), { stdio: 'inherit', cwd: root });
        if (!res.success) {
            console.warn(`Updating ${updateFile} failed. Continuing...`);
        }
    }
}
exports.updateLockFile = updateLockFile;
//# sourceMappingURL=updateLockFile.js.map